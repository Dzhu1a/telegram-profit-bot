import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    ConversationHandler,
    filters,
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime

# ========== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ==========
TOKEN = "7744082797:AAFrLzG_k1tyXsK0KbJAXB0keTNBP7OBzWE"
TABLE_NAME = "order"
SHEET_NAME = "–ê—Ä–∫—É—à1"
CREDS_FILE = "creds.json"

# ========== –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –¥–æ Google Sheets ==========
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(CREDS_FILE, scope)
client = gspread.authorize(creds)
sheet = client.open(TABLE_NAME).worksheet(SHEET_NAME)

# ========== –°—Ç–∞–Ω–∏ ==========
TTN, SALE_PRICE, SUPPLIER_PRICE, COMMISSION = range(4)

# ========== –õ–æ–≥—É–≤–∞–Ω–Ω—è ==========
logging.basicConfig(level=logging.INFO)

# ========== –ú–µ–Ω—é –∑ –∫–Ω–æ–ø–∫–æ—é ==========
async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–†–æ–∑–ø–æ—á–∞—Ç–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("üëã –í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=reply_markup)

# ========== –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É ==========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –¢–¢–ù:")
    return TTN

async def get_ttn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("üì• –û—Ç—Ä–∏–º–∞–Ω–æ –¢–¢–ù:", update.message.text)  # Debug
    context.user_data["ttn"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É –ø—Ä–æ–¥–∞–∂—É:")
    return SALE_PRICE

async def get_sale_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["sale_price"] = float(update.message.text)
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É —É –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞:")
    return SUPPLIER_PRICE

async def get_supplier_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["supplier_price"] = float(update.message.text)
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –∫–æ–º—ñ—Å—ñ—é (–≥—Ä–Ω):")
    return COMMISSION

async def get_commission(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        commission = float(update.message.text)
        ttn = context.user_data["ttn"]
        sale = context.user_data["sale_price"]
        supplier = context.user_data["supplier_price"]

        profit = sale - supplier - commission
        part65 = round(profit * 0.65, 2)
        part35 = round(profit * 0.35, 2)
        date = datetime.now().strftime("%d.%m.%Y %H:%M")

        # –ó–∞–ø–∏—Å —É Google —Ç–∞–±–ª–∏—Ü—é
        sheet.append_row([ttn, sale, supplier, commission, profit, part65, part35, date])

        await update.message.reply_text(
            f"‚úÖ –ß–∏—Å—Ç–∏–π –ø—Ä–∏–±—É—Ç–æ–∫: {profit} –≥—Ä–Ω\n"
            f"üîπ 65% = {part65} –≥—Ä–Ω\n"
            f"üîπ 35% = {part35} –≥—Ä–Ω\n"
            f"üìã –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!"
        )

    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

# ========== –ó–∞–ø—É—Å–∫ ==========
app = ApplicationBuilder().token(TOKEN).build()

# –ú–µ–Ω—é –∑ –∫–Ω–æ–ø–∫–æ—é
app.add_handler(CommandHandler("start", menu))

# –û—Å–Ω–æ–≤–Ω–∞ —Ä–æ–∑–º–æ–≤–∞
conv_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^–†–æ–∑–ø–æ—á–∞—Ç–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫$"), start)],
    states={
        TTN: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_ttn)],
        SALE_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_sale_price)],
        SUPPLIER_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_supplier_price)],
        COMMISSION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_commission)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)

app.add_handler(conv_handler)

print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
app.run_polling()
